{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","useState","checked","setChecked","stepChange","setStepChange","frame","setFrame","transition","setTransition","width","setWidth","stepPerClick","setStepPerClick","imagesState","setImagesState","className","style","map","image","i","transform","transitionDuration","src","alt","type","cn","onClick","prev","setTimeout","slice","length","htmlFor","id","defaultValue","min","max","onChange","event","target","value","Array","from","_","filter","elem","href","App","state","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.45a09fcd.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './Carousel.scss';\nimport cn from 'classnames';\n\ntype Props = {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n};\n\nconst Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n}) => {\n  const [checked, setChecked] = useState(infinite);\n  const [stepChange, setStepChange] = useState(step);\n  const [frame, setFrame] = useState(frameSize);\n  const [transition, setTransition] = useState(animationDuration);\n  const [width, setWidth] = useState(itemWidth);\n\n  const [stepPerClick, setStepPerClick] = useState(() => {\n    if (checked) {\n      return stepChange;\n    }\n\n    return 0;\n  });\n\n  const [imagesState, setImagesState] = useState(() => {\n    if (checked) {\n      return [\n        ...images,\n        ...images,\n        ...images,\n      ];\n    }\n\n    return images;\n  });\n\n  const changeFrame = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setFrame(+event.target.value);\n  };\n\n  const changeStep = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setStepChange(+event.target.value);\n\n    if (checked) {\n      setImagesState([\n        ...images,\n        ...images,\n        ...images,\n      ]);\n      setStepPerClick(images.length);\n    }\n  };\n\n  const handleCheckBox = () => {\n    setChecked(prev => !prev);\n    setTransition(0);\n    setStepPerClick(0);\n\n    setImagesState([\n      ...images,\n    ]);\n\n    if (!checked) {\n      setStepPerClick(images.length);\n      setImagesState([\n        ...images,\n        ...images,\n        ...images,\n      ]);\n    }\n\n    setTimeout(() => setTransition(transition), 10);\n  };\n\n  const handleTurnRight = () => {\n    if (!checked) {\n      if (stepPerClick < (images.length - 1) - stepChange) {\n        setStepPerClick(prev => prev + stepChange);\n      }\n\n      if (stepPerClick + stepChange >= images.length - frame) {\n        setStepPerClick(images.length - frame);\n      }\n    }\n\n    if (checked) {\n      setStepPerClick(images.length + stepChange);\n\n      setTimeout(() => {\n        setImagesState([\n          ...imagesState.slice(-(images.length - stepChange)),\n          ...imagesState.slice(0, -(images.length - stepChange)),\n        ]);\n\n        setTransition(0);\n        setStepPerClick(images.length);\n\n        setTimeout(() => setTransition(transition), 10);\n      }, transition);\n    }\n  };\n\n  const handleTurnLeft = () => {\n    if (stepPerClick - stepChange < 0) {\n      setStepPerClick(0);\n    }\n\n    if (stepPerClick - stepChange >= 0) {\n      setStepPerClick(prev => prev - stepChange);\n    }\n\n    if (checked) {\n      setTimeout(() => {\n        setImagesState([\n          ...imagesState.slice(images.length - stepChange),\n          ...imagesState.slice(0, images.length - stepChange),\n        ]);\n\n        setStepPerClick(images.length);\n        setTransition(0);\n\n        setTimeout(() => setTransition(transition), 10);\n      }, transition);\n    }\n  };\n\n  const handleAnimation = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTransition(+event.target.value);\n  };\n\n  const handleWidth = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setWidth(+event.target.value);\n  };\n\n  return (\n    <div className=\"Carousel\">\n      <div\n        className=\"Carousel__wrapper\"\n        style={{\n          width: `${frame * width}px`,\n        }}\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            width: `${width * frame}px`,\n          }}\n        >\n          {\n            imagesState.map((image, i) => (\n              <li\n                key={`${image + i}`}\n                style={{\n                  transform: `translateX(${stepPerClick * (-100)}%)`,\n                  transitionDuration: `${transition}ms`,\n                }}\n              >\n                <img\n                  src={image}\n                  alt={`${i}`}\n                  key={`${image + i}`}\n                  style={{\n                    width: `${width}px`,\n                  }}\n                />\n              </li>\n            ))\n          }\n        </ul>\n      </div>\n\n      <div className=\"Carousel__button-wrapper\">\n        <button\n          type=\"button\"\n          aria-label=\"left\"\n          className={cn(\n            'Carousel__button',\n            'Carousel__button--left',\n            {\n              'Carousel__button--blocked': stepPerClick === 0,\n            },\n          )}\n          onClick={handleTurnLeft}\n        />\n        <button\n          type=\"button\"\n          aria-label=\"right\"\n          data-cy=\"next\"\n          className={cn(\n            'Carousel__button',\n            'Carousel__button--right',\n            {\n              'Carousel__button--blocked': !checked\n              && stepPerClick >= images.length - stepChange,\n            },\n          )}\n          onClick={handleTurnRight}\n        />\n      </div>\n      <div className=\"Carousel__settings\">\n        <div className=\"Carousel__settings-wrapper\">\n          <label htmlFor=\"frameSize\">Images count</label>\n          <div className=\"Carousel__settings-info\">\n            <input\n              type=\"range\"\n              id=\"frameSize\"\n              defaultValue={frameSize}\n              min=\"1\"\n              max={checked ? images.length : images.length - stepPerClick}\n              step=\"1\"\n              onChange={changeFrame}\n            />\n            <div className=\"Carousel__settings-range\">\n              {\n                Array.from({ length: images.length }, (_, i) => i + 1)\n                  .filter(elem => {\n                    if (checked) {\n                      return elem;\n                    }\n\n                    return elem <= images.length - stepPerClick;\n                  })\n                  .map(elem => (\n                    <a href={`${elem}`} key={elem}>{elem}</a>\n                  ))\n              }\n            </div>\n          </div>\n        </div>\n\n        <div className=\"Carousel__settings-wrapper\">\n          <label htmlFor=\"width\">Size</label>\n          <input\n            type=\"number\"\n            id=\"width\"\n            step={10}\n            defaultValue={130}\n            max={400}\n            onChange={handleWidth}\n          />\n        </div>\n\n        <div className=\"Carousel__settings-wrapper\">\n          <label htmlFor=\"size\">Step</label>\n          <div className=\"Carousel__settings-info\">\n            <input\n              type=\"range\"\n              id=\"size\"\n              defaultValue={stepChange}\n              min=\"1\"\n              max=\"10\"\n              step=\"1\"\n              onChange={changeStep}\n            />\n            <div className=\"Carousel__settings-range\">\n              {\n                Array.from({ length: images.length }, (_, i) => i + 1)\n                  .map(elem => (\n                    <a href={`${elem}`} key={elem}>{elem}</a>\n                  ))\n              }\n            </div>\n          </div>\n        </div>\n\n        <div className=\"Carousel__settings-wrapper\">\n          <label htmlFor=\"duration\">Duration</label>\n          <input\n            type=\"number\"\n            id=\"duration\"\n            step={100}\n            defaultValue={animationDuration}\n            onChange={handleAnimation}\n          />\n        </div>\n\n        <div className=\"Carousel__settings-wrapper\">\n          <label htmlFor=\"infinite\">Infinite</label>\n          <div className=\"Carousel__settings-left\">\n            <input\n              type=\"checkbox\"\n              id=\"infinite\"\n              checked={checked}\n              onChange={handleCheckBox}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React from 'react';\nimport './App.scss';\nimport Carousel from './components/Carousel';\n\ninterface State {\n  images: string[];\n}\n\nclass App extends React.Component<{}, State> {\n  state = {\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n  };\n\n  render() {\n    const { images } = this.state;\n    const step = 3;\n    const frameSize = 3;\n    const itemWidth = 130;\n    const animationDuration = 1000;\n    const infinite = false;\n\n    return (\n      <div className=\"App\">\n        {/* eslint-disable-next-line */}\n        <h1 data-cy=\"title\">Carousel with {images.length} images</h1>\n\n        <Carousel\n          images={images}\n          step={step}\n          frameSize={frameSize}\n          itemWidth={itemWidth}\n          animationDuration={animationDuration}\n          infinite={infinite}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}